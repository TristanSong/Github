#!/usr/bin/env python3# -*-coding: utf-8 -*-"""Created on Fri Jul 28 08:43:00 2017@author: TristanSong"""import tkinter as tkfrom tkinter import ttkimport pymysqlimport threadingimport sysimport timeimport reemployees = []conn = pymysql.connect(host='127.0.0.1', port=3306, user='root', passwd='', db='2h_OEE', charset='utf8mb4')cur = conn.cursor()# 获取所有员工工号cur.execute('SELECT ic_card FROM employee_db')result = cur.fetchall()for i in result:    employees.extend(list(i))cur.close()conn.close()cfLists = ('MTB-5kg', 'MTB-10kg', 'MTB-20kg', 'MTB-30kg', 'MTB-50kg', 'MTB-75kg', 'MTB-100kg', 'MTB-200kg', 'MTB-300kg', 'MTB-500kg',           'SLB615D-220kg', 'SLB615D-550kg', 'SLB615D-1100kg', 'SLB615D-2200kg', 'SLB615D-4400kg',           'SLB215-220kg', 'SLB215-550kg', 'SLB215-1100kg', 'SLB215-2200kg', 'SLB215-4400kg',           'SLC611-5t', 'SLC611-7.5t', 'SLC611-10t', 'SLC611-15t', 'SLC611-22.5t',           'Scout-200g', 'Scout-400g', 'Scout-600g', 'Scout-2200g', 'Scout-4000g', 'Scout-6000g',            'Viking-150g', 'Viking-1500g', 'Viking-8000g', 'SLP854D-10kg', 'SLP854D-20kg',           'SLP850D/852D-10kg', 'SLP850D/852D-20kg', 'SLP845-50kg', '新品')cncLists = ('1#', '2#', '3#', '4#', '6#', '7#', '12#', '13#', '14#', '15#', '17#', '19#', '23#', '24#', '25#', '27#', '28#', '29#', '30#',            '31#', '32#', '33#', '34#', '35#', '36#', '37#', '38#', '39#', '40#', '41#', '42#', '43#', '44#', '45#')noteLists = ('无', '热机', '点检', '保养', '用餐', '故障', '休假', '新品')class startPage(tk.Tk):    def __init__(self, *args, **kwargs):        tk.Tk.__init__(self)        self.wm_title('2h-OEE for POLC QM&CNC')        self.geometry('800x400')        self.resizable(0,0)        container = tk.Frame(self)        container.pack(side='top', fill='both', expand=True)        ###########################################################        firstLabel = ttk.Label(container, text="生产记录")        firstLabel.grid(row=0, column=0, rowspan=2)        # 工号        nameLabel = ttk.Label(container, text='工号')        nameLabel.grid(row=0, column=1)        self.nameNum = tk.StringVar()        nameEntry = ttk.Entry(container, width=20, textvariable=self.nameNum)        nameEntry.grid(row=1, column=1)        nameEntry.focus()        # 机床              cncLabel = ttk.Label(container, text='机床号')        cncLabel.grid(row=0, column=2)        self.cncNum = tk.StringVar()        self.cncNum.set('1#')        cncEntry = ttk.Combobox(container, width=17, textvariable=self.cncNum)        cncEntry['values'] = cncLists        cncEntry.grid(row=1, column=2)        # 规格-容量        cfLabel = ttk.Label(container, text='规格-容量')        cfLabel.grid(row=0, column=3)        self.cfNum = tk.StringVar()        cfEntry = ttk.Combobox(container, width=17, textvariable=self.cfNum)        cfEntry['values'] = cfLists        cfEntry.grid(row=1, column=3)        # 加工数量        totalLabel = ttk.Label(container, text='加工数量')        totalLabel.grid(row=0, column=4)        self.totalNum = tk.StringVar()        totalEntry = tk.Entry(container, width=20, textvariable=self.totalNum)        totalEntry.grid(row=1, column=4)        # 合格数量        qualifiedLabel = ttk.Label(container, text='合格数量')        qualifiedLabel.grid(row=0, column=5)        self.qualifiedNum = tk.StringVar()        qualifiedEntry = tk.Entry(container, width=20, textvariable=self.qualifiedNum)        qualifiedEntry.grid(row=1, column=5)        ###########################################################        secondLabel = ttk.Label(container, text="负荷时间")        secondLabel.grid(row=3, column=0, rowspan=2)        # 开动时间        loadLabel = ttk.Label(container, text='开动时间')        loadLabel.grid(row=3, column=1)        self.loadNum = tk.StringVar()        loadEntry = tk.Entry(container, width=20, textvariable=self.loadNum)        loadEntry.grid(row=4, column=1)        # 换型时间        changeLabel = ttk.Label(container, text='换型时间')        changeLabel.grid(row=3, column=2)        self.changeNum = tk.StringVar()        self.changeNum.set('0') #时间默认为0        changeEntry = tk.Entry(container, width=20, textvariable=self.changeNum)        changeEntry.grid(row=4, column=2)        # 设备故障        downLabel = ttk.Label(container, text='设备故障')        downLabel.grid(row=3, column=3)        self.downNum = tk.StringVar()        self.downNum.set('0') #时间默认为0        downEntry = tk.Entry(container, width=20, textvariable=self.downNum)        downEntry.grid(row=4, column=3)        # 临时停机        tempDownLabel = ttk.Label(container, text='临时停机')        tempDownLabel.grid(row=3, column=4)        self.tempDownNum = tk.StringVar()        self.tempDownNum.set('0')        tempDownEntry = tk.Entry(container, width=20, textvariable=self.tempDownNum)        tempDownEntry.grid(row=4, column=4)        ###########################################################        thirdLabel = ttk.Label(container, text="计划停机")        thirdLabel.grid(row=6, column=0, rowspan=2)        # 无订单待产        noOrderLabel = ttk.Label(container, text='无订单待产')        noOrderLabel.grid(row=6, column=1)                self.noOrderNum = tk.StringVar()        self.noOrderNum.set('0')        noOrderEntry = tk.Entry(container, width=20, textvariable=self.noOrderNum)        noOrderEntry.grid(row=7, column=1)        # 长时间缺料        matLackLabel = ttk.Label(container, text='长时间缺料')        matLackLabel.grid(row=6, column=2)        self.matLackNum = tk.StringVar()        self.matLackNum.set('0')        matLackEntry = tk.Entry(container, width=20, textvariable=self.matLackNum)        matLackEntry.grid(row=7, column=2)        # 计划保养        mainteinLabel = ttk.Label(container, text='计划保养')        mainteinLabel.grid(row=6, column=3)        self.mainteinNum = tk.StringVar()        mainteinEntry = tk.Entry(container, width=20, textvariable=self.mainteinNum)        mainteinEntry.grid(row=7, column=3)        # 其他计划停机        otherLabel = ttk.Label(container, text='其他计划停机')        otherLabel.grid(row=6, column=4)        self.otherNum = tk.StringVar()        otherEntry = tk.Entry(container, width=20, textvariable=self.otherNum)        otherEntry.grid(row=7, column=4)        ###########################################################        fourthLabel = ttk.Label(container, text="备注")        fourthLabel.grid(row=9, column=0)        self.noteNum = tk.StringVar()        self.noteNum.set('无')        noteEntry = ttk.Combobox(container, width=80, textvariable=self.noteNum)        noteEntry['values'] = noteLists        noteEntry.grid(row=9, column=1, columnspan=4)        submitButton = ttk.Button(container, text='提交', command=self.submit)        submitButton.grid(row=10, column=0, columnspan=5)    def submit(self):        inputData = {'name': self.nameNum.get(), 'cnc': self.cncNum.get(), 'cf': self.cfNum.get(), 'cf_output': self.totalNum.get(), 'cf_ok': self.qualifiedNum.get(),                     'load': self.loadNum.get(), 'change': self.changeNum.get(), 'down': self.downNum.get(), 'temp': self.tempDownNum.get(),                     'no_order': self.noOrderNum.get(), 'mat_lack': self.matLackNum.get(), 'maintein': self.mainteinNum.get(), 'other': self.otherNum.get(),                     'note': self.noteNum.get()}        ###########################################################        # 新品        if inputData['note'] == '新品':            inputData['name'] = '0'            if inputData['cnc'] not in cncLists:                popupMsg('请选择机床号！')                return quit            inputData['cf'] = '新品'            inputData['cf_output'] = 0            inputData['cf_ok'] = 0        ###########################################################        # 正常产品        else:            if inputData['name'] not in employees:                popupMsg('请扫描工号卡！')                return quit            if inputData['cnc'] not in cncLists:                popupMsg('请选择机床号！')                return quit            if inputData['cf'] not in cfLists:                popupMsg('请输入正确弹性体-容量！')                return quit            if not inputData['cf_output'].isdigit():                popupMsg('请输入正确加工数量！')                return quit            else:                inputData['cf_output'] = int(inputData['cf_output'])            if not inputData['cf_ok'].isdigit():                popupMsg('请输入正确合格数量！')                return quit            else:                inputData['cf_ok'] = int(inputData['cf_ok'])        ###########################################################        # 时间输入        if not inputData['load'].isdigit():            popupMsg('请输入正确开动时间！')            return quit         else:            inputData['load'] = int(inputData['load'])        if not inputData['change'].isdigit():            popupMsg('请输入正确换型时间！')            return quit        else:            inputData['change'] = int(inputData['change'])        if not inputData['down'].isdigit():            popupMsg('请输入正确设备故障时间！')            return quit        else:            inputData['down'] = int(inputData['down'])        if not inputData['temp'].isdigit():            popupMsg('请输入正确临时停机时间！')            return quit        else:            inputData['temp'] = int(inputData['temp'])        if not inputData['no_order'].isdigit():            popupMsg('请输入正确无订单待产时间！')            return quit        else:            inputData['no_order'] = int(inputData['no_order'])        if not inputData['mat_lack'].isdigit():            popupMsg('请输入正确长时间时间！')            return quit        else:            inputData['mat_lack'] = int(inputData['mat_lack'])        if not inputData['maintein'].isdigit():            popupMsg('请输入正确计划保养时间！')            return quit        else:            inputData['maintein'] = int(inputData['maintein'])        if not inputData['other'].isdigit():            popupMsg('请输入正确其他计划停机时间！')            return quit        else:            inputData['other'] = int(inputData['other'])        if inputData['note'] not in noteLists:            popupMsg('请选择备注！')            return quit        calendarTime = inputData['load']+inputData['change']+inputData['down']+inputData['temp']+\                       inputData['no_order']+inputData['mat_lack']+inputData['maintein']+inputData['other']        if calendarTime != 120:            popupMsg('时间总和不是120min！')            return quit        ###########################################################        # 新品        if inputData['note'] == '新品':            inputData['shift'] = 0            inputData['duration'] = time.localtime()[3]//2            inputData['cf_time'] = 0            inputData['cf_stand'] = 0        # 正常产品        else:            conn = pymysql.connect(host='127.0.0.1', port=3306, user='root', passwd='', db='2h_OEE', charset='utf8mb4')            cur = conn.cursor()            # 从数据库提取对应工号、班次            cur.execute('SELECT employee_id, shift FROM employee_db WHERE ic_card=%s', (inputData['name'], ))            result = cur.fetchall()            inputData['name'] = result[0][0]            inputData['shift'] = result[0][1]            inputData['duration'] = time.localtime()[3]//2            # 从数据库提取弹性体对应的加工时间、标准产量            cur.execute('SELECT cnc, shift_output, stand1, stand2, stand3, stand4 FROM cf_db WHERE cf=%s', (inputData['cf'], ))            result = cur.fetchall()            stand = inputData['duration']%4            # 所有机床的班产量统一            if len(result) == 1:                inputData['cf_time'] = float(420 / result[0][1])                inputData['cf_stand'] = result[0][stand+2]            # 机床的班产量不统一            else:                ind = []                for i in range(len(result)):                    ind.append(result[i][0])                # 对应机床的班产量                if inputData['cnc'] in ind:                    cnc_ind = ind.index(inputData['cnc'])                    inputData['cf_time'] = float(420 / result[cnc_ind][1])                    inputData['cf_stand'] = result[cnc_ind][stand+2]                # 没有对应机床则为统一的班产量                else:                    cnc_ind = ind.index('0#')                    inputData['cf_time'] = float(420 / result[cnc_ind][1])                    inputData['cf_stand'] = result[cnc_ind][stand+2]            cur.close()            conn.close()        ###########################################################        outputData = inputData.copy()        # 日历时间        outputData['calendar_time'] = calendarTime        # 新品时间        if outputData['note'] == '新品':            outputData['prototype'] = outputData['load']        else:            outputData['prototype'] = 0        # 负荷时间        if outputData['note'] == '新品':            outputData['plan_time'] = 0        else:            outputData['plan_time'] = outputData['load']+outputData['change']+outputData['down']+outputData['temp']        # 开动时间        if outputData['note'] == '新品':            outputData['load_time'] = 0        else:            outputData['load_time'] = outputData['load']        # 设备利用率        if outputData['calendar_time']==0:            outputData['utility'] = 0        else:            if outputData['note'] == '新品':                outputData['utility'] = outputData['prototype']/outputData['calendar_time']            else:                outputData['utility'] = outputData['plan_time']/outputData['calendar_time']        # 标准生产时间        if outputData['note'] == '新品':            outputData['ideal_time'] = outputData['load_time']        else:            outputData['ideal_time'] = outputData['cf_ok']*outputData['cf_time']                ###########################################################        # OEE数据_班        if outputData['duration']%4 == 3:            Y = str(time.localtime()[0])            M = str(time.localtime()[1])            D = str(time.localtime()[2])            if outputData['duration']<4:                H0 = '00'                H1 = '08'            elif outputData['duration']<8:                H0 = '08'                H1 = '16'            else:                H0 = '16'                H1 = '24'            time0 = Y + '-' + M + '-' + D + ' ' + H0 + ':00:00'            time1 = Y + '-' + M + '-' + D + ' ' + H1 + ':00:00'            # 取出前3时间段数据            conn = pymysql.connect(host='127.0.0.1', port=3306, user='root', passwd='', db='2h_OEE', charset='utf8mb4')            cur = conn.cursor()            table_name = re.sub('\D', '', outputData['cnc']) + '_db'            sql = 'SELECT calendar_time, plan_time, load_time, utility, ideal_time, cf_output, cf_ok, no_order, mat_lack, maintein, other FROM ' + \                  table_name + ' WHERE submit_time>=%s AND submit_time<%s'            cur.execute(sql, (time0, time1))            result = cur.fetchall()            cur.close()            conn.close()            oee_data = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]            for i in result:                for j in range(len(i)):                    oee_data[j] += i[j]            # 累加第4时间段数据            oee_data[0] += outputData['calendar_time']            oee_data[1] += outputData['plan_time']            oee_data[2] += outputData['load_time']            oee_data[3] += outputData['utility']            oee_data[4] += outputData['ideal_time']            oee_data[5] += outputData['cf_output']            oee_data[6] += outputData['cf_ok']            oee_data[7] += outputData['no_order']            oee_data[8] += outputData['mat_lack']            oee_data[9] += outputData['maintein']            oee_data[10] += outputData['other']            # availability, performance, quality            if outputData['note'] == '新品' or oee_data[0]==(oee_data[-1]+oee_data[-2]+oee_data[-3]+oee_data[-4]):                outputData['availability'] = 0                outputData['performance'] = 0                outputData['quality'] = 0            else:                if oee_data[2] == 0:                    outputData['availability'] = 0                    outputData['performance'] = 0                    outputData['quality'] = 0                else:                    outputData['availability'] = oee_data[2]/oee_data[1]                    outputData['performance'] = oee_data[4]/oee_data[2]                    outputData['quality'] = oee_data[6]/oee_data[5]            # oee_shift            if outputData['note'] == '新品' or oee_data[0]==0 or (oee_data[-1]+oee_data[-2]+oee_data[-3]+oee_data[-4])==480:                outputData['oee_shift'] = 0            else:                outputData['oee_shift'] = outputData['availability'] * outputData['performance'] * outputData['quality']            # teep_shift            if oee_data[0] == 0:                outputData['teep_shift'] = 0            else:                if outputData['note'] == '新品':                    outputData['teep_shift'] = oee_data[3]/4                else:                    if (oee_data[-1]+oee_data[-2]+oee_data[-3]+oee_data[-4])==480:                        outputData['teep_shift'] = 0                    else:                        outputData['teep_shift'] = outputData['oee_shift'] * oee_data[3]                                ###########################################################        # OEE数据_天        if outputData['duration'] == 11:            Y = str(time.localtime()[0])            M = str(time.localtime()[1])            D = str(time.localtime()[2])            time0 = Y + '-' + M + '-' + D + ' ' + '00:00:00'            time1 = Y + '-' + M + '-' + D + ' ' + '23:59:59'            conn = pymysql.connect(host='127.0.0.1', port=3306, user='root', passwd='', db='2h_OEE', charset='utf8mb4')            cur = conn.cursor()            table_name = re.sub('\D', '', outputData['cnc']) + '_db'            sql = 'SELECT oee_shift, teep_shift FROM ' + table_name + ' WHERE submit_time>=%s AND submit_time<%s AND duration IN (3, 7, 11)'            cur.execute(sql, (time0, time1))            result = cur.fetchall()            cur.close()            conn.close()            data_day = [0, 0]            for i in result:                for j in range(len(i)):                    data_day[j] += i[j]            # 添加第3班记录            data_day[0] += outputData['oee_shift']            data_day[1] += outputData['teep_shift']            outputData['oee_day'] = data_day[0]/(len(result)+1)            outputData['teep_day'] = data_day[1]/(len(result)+1)                ###########################################################        # 数据传入数据库        conn = pymysql.connect(host='127.0.0.1', port=3306, user='root', passwd='', db='2h_OEE', charset='utf8mb4')        cur = conn.cursor()        table_name = re.sub('\D', '', outputData['cnc']) + '_db'        if  outputData['duration'] == 11:            sql = 'INSERT INTO ' + table_name + \                    '(shift, name, duration, cf, cf_time, cf_stand, cf_output, cf_ok,\                    load_1, changeover, down, temp, no_order, mat_lack, maintein, other, note, \                    calendar_time, plan_time, load_time, utility, ideal_time, prototype, \                    availability, performance, quality, oee_shift, teep_shift, oee_day, teep_day) \                    VALUES(%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s)'            cur.execute(sql, (outputData['shift'], outputData['name'], outputData['duration'], outputData['cf'], outputData['cf_time'], \                              outputData['cf_stand'], outputData['cf_output'], outputData['cf_ok'], \                              outputData['load'], outputData['change'], outputData['down'], outputData['temp'], \                              outputData['no_order'], outputData['mat_lack'], outputData['maintein'], outputData['other'], outputData['note'], \                              outputData['calendar_time'], outputData['plan_time'], outputData['load_time'], \                              outputData['utility'], outputData['ideal_time'], outputData['prototype'], \                              outputData['availability'], outputData['performance'], outputData['quality'], \                              outputData['oee_shift'], outputData['teep_shift'], outputData['oee_day'], outputData['teep_day']))        elif outputData['duration']%4 == 3:            sql = 'INSERT INTO ' + table_name + \                    '(shift, name, duration, cf, cf_time, cf_stand, cf_output, cf_ok,\                    load_1, changeover, down, temp, no_order, mat_lack, maintein, other, note, \                    calendar_time, plan_time, load_time, utility, ideal_time, prototype, \                    availability, performance, quality, oee_shift, teep_shift) \                    VALUES(%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s)'            cur.execute(sql, (outputData['shift'], outputData['name'], outputData['duration'], outputData['cf'], outputData['cf_time'], \                              outputData['cf_stand'], outputData['cf_output'], outputData['cf_ok'], \                              outputData['load'], outputData['change'], outputData['down'], outputData['temp'], \                              outputData['no_order'], outputData['mat_lack'], outputData['maintein'], outputData['other'], outputData['note'], \                              outputData['calendar_time'], outputData['plan_time'], outputData['load_time'], \                              outputData['utility'], outputData['ideal_time'], outputData['prototype'], \                              outputData['availability'], outputData['performance'], outputData['quality'], \                              outputData['oee_shift'], outputData['teep_shift']))        else:            sql = 'INSERT INTO ' + table_name + \                    '(shift, name, duration, cf, cf_time, cf_stand, cf_output, cf_ok,\                    load_1, changeover, down, temp, no_order, mat_lack, maintein, other, note, \                    calendar_time, plan_time, load_time, utility, ideal_time, prototype) \                    VALUES(%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s)'            cur.execute(sql, (outputData['shift'], outputData['name'], outputData['duration'], outputData['cf'], outputData['cf_time'], \                              outputData['cf_stand'], outputData['cf_output'], outputData['cf_ok'], \                              outputData['load'], outputData['change'], outputData['down'], outputData['temp'], \                              outputData['no_order'], outputData['mat_lack'], outputData['maintein'], outputData['other'], outputData['note'], \                              outputData['calendar_time'], outputData['plan_time'], outputData['load_time'], \                              outputData['utility'], outputData['ideal_time'], outputData['prototype']))        cur.close()        conn.commit()        conn.close()        popupMsg('提交成功！')        def popupMsg(msg):    popup = tk.Tk()    popup.wm_title('Warning!')    popup.geometry('300x100')    label = tk.Label(popup, text=msg)    label.pack(side='top', fill='both', expand=True)    command = ttk.Button(popup, text='OK', command=popup.destroy)    command.pack(side='bottom')    popup.mainloop()def main():    app = startPage()    app.mainloop()if __name__ == '__main__':    main()