#!/usr/env/bin python3# -*-coding:utf-8 -*-'''Created on Tue Aug 08:37:00 2017@author: TristanSong'''from urllib.request import urlopenfrom urllib.parse import quotefrom bs4 import BeautifulSoupimport osimport platformimport reclass baiduPlaceAPI(object):    '''    query = '' # The search item: 小区、公园、中学、小学等    output = '' # 2 types: 'json' or 'xml'. default 'xml'  in baiduMapAPI    coord_type = '' # 4 types: 1: wgs84ll/GPS, 2: gcj0211, 3: bd0911, 4: bd09mc. default: 3  in baiduMapAPI    page_size = '' # Number of search items per page. default 10, maximum 20  in baiduMapAPI    ak = '' # The key to use baidu place API, necessary, could apply the API for free use in 'http://lbsyun.baidu.com/apiconsole/key?application=key'    # Search in cities    region = '' # City or above    city_limit = '' # City limit, 'true' or 'false'. default 'false' in baiduMapAPI    '''    def __init__(self, directory, query='小区', output='xml', coord_type=1, region='常州', city_limit='true', page_size=20, ak='sBcx4AQLUnm6rHkcOCwCRbWSkNfKBDPh'):        self.query = query        self.output = output        self.coord_type = coord_type        self.region = region        self.city_limit = city_limit        self.page_size = page_size        self.ak = ak        self.directory = directory            def placeSearch(self):        self.checkDirectory()        baseURL = 'http://api.map.baidu.com/place/v2/search?'        pageNo = 0        total_status = '328'        while True:            print('Downloading page %d...'%pageNo)            url = baseURL + '&query=' + quote(self.query) + '&region=' + quote(self.region) + '&coord_type' + str(self.coord_type) + \                  '&city_limit=' + self.city_limit + '&output' + self.output + '&ak=' + self.ak + '&page_size=' + str(self.page_size) + '&page_num=' + str(pageNo)            html = urlopen(url).read()            bsObj = BeautifulSoup(html, 'html.parser')            total_status = bsObj.find('total').get_text()            if total_status == '0':                break            nameList = bsObj.find_all('name')            latitudeList = bsObj.find_all('lat')            longitudeList = bsObj.find_all('lng')            addrLists = bsObj.find_all('address')            for i in range(len(nameList)):                results = [nameList[i].get_text(), latitudeList[i].get_text(), longitudeList[i].get_text()]                addr = addrLists[i].get_text()                results.append(addr)                # 提取所在区，对于没有以下关键字的小区只能进行人工补齐                district = re.findall('(\u6ea7\u9633|\u65b0\u5317|\u5929\u5b81|\u949f\u697c|\u6b66\u8fdb|\u91d1\u575b|\u621a\u5885\u5830)', addr)                if district == []:                    results.append('no district')                else:                    results.append(district[0])                self.saveMSG(results)            pageNo += 1        print('Downloading completed!')    # Check whether directory exists    def checkDirectory(self):        # If directory not exists, create it.        if not os.path.exists(self.directory):            print(self.directory + 'does not exist, will be created.')            os.makedirs(self.directory)        filename = self.directory + self.region + '_' + self.query + '.csv'        if os.path.exists(filename):            print(filename + ' already exists, will be cleared for storing.')            with open(filename, 'w') as f:                f.close()    # Save search result    def saveMSG(self, results):        filename = self.directory + self.region + '_' + self.query + '.csv'        if platform.system() == 'Darwin':            with open(filename, 'ab+') as f:                for result in results:                    f.write((result + ',').encode('utf-8'))                f.write('\n'.encode('utf-8'))        else:            with open(filename, 'a+') as f:                for result in results:                    f.write(result + ',')                f.write('\n')        f.close()